// Telegraph Server
// Nate Hunzaker
//
// A framework based on Backbone for event driven applications


//-- Requirements ------------------------------------------------------//

// Side Dishes
require('./colors');

var _            = require('underscore')
,   EventEmitter = require("events").EventEmitter
,   ejs          = require('ejs')
,   express      = require('express')
,   config       = require("konphyg")(process.cwd() + "/config")
,   util         = require('util') || require('sys')
;

module.exports = Telegraph = function (options) {
    
    //-- Defaults -------------------------------------------------------//

    var settings = {
        'appname'        : "Telegraph",
        'routes'         : [],
        'websockets'     : false,
        'logger'         : require("./logger")
    };

    var self = this;
    
    // A reference list for all events the server is listening for
    this.events = [];

    // Add Default Overides
    _.extend(self, settings, options);
    
    // Extend telegraph with json provided in ./config
    var config = require("./helpers/utilities").configure;
    config(this);

    // Remaining setup
    self._setup();

};

Telegraph.prototype = new EventEmitter;
Telegraph.prototype.register  = Telegraph.prototype.on,

// Backbone Server Functionality
_.extend(Telegraph.prototype, {
    
    load: require("./helpers/utilities").load,
    
    //-- Extend the "on" function ---------------------------------------//
    
    on: function(name, action) {

        var self = this;
        
        self.events.push(name, action);

        switch(name.split(":")[0]) {
            
        case "websocket":

            self.register(name, action);
            
            self.websocket_events.push({
                name   : name.split(":")[1], 
                action : function(data) {
                    self.info("emitting " + name);
                    self.emit(name, data);
                }
            });

            break;

        default:
            self.register(name, action);
        }

        return self;
    },

    //-- Reporting -----------------------------------------------------//

    log: function(type, strings) {
        var message = "";
        
        // Until I can figure out a way to handle this in older node versions,
        // we'll do the best we can
        if (util.format) {
            message = util.format.apply(this, strings);
        } else {
            message = Array.prototype.join.apply(strings, [" "]);
        }
        
        this.logger[type](message);
    },
    
    info: function() {
        this.log("info", arguments);
        return this;
    },
    
    error: function() {
        this.log("error", arguments);
        return this;
    },

    warn: function() {
        this.log("warn", arguments);
        return this;
    },

    success: function() {
        this.log("success", arguments);
        return this;
    },

    //-- Express Configuration Methods -------------------------------//

    use: function(middleware, config) {
        
        if (typeof middleware === "string") {
            middleware = express[middleware](config);            
        }

        this.express.use(middleware, config);

        return this;
    },
    
    set: function(name, config) {
        this.express.set(name, config);

        return this;
    },

    mount: function(route, app) {

        app = (typeof app === 'string') ? require(process.cwd() + "/" + app) : app;

        this.info("Mounting an application to %s", route);
        this.express.use(route, app);
        return this;
    },

    //-- Database Methods  --------------------------------------------//
    
    _db_connect: function() {
        if ("database" in this) require("./database").setup(this);
    },

    //-- Server Methods ------------------------------------------------//

    _setup: function() {   

        var self = this,
            pdir = process.cwd() + "/public";
        
        var server = this.express = express.createServer(

            express.bodyParser(),
            express.cookieParser(),
            express.session({ secret : self.session || Date.now().toString() }),

            express.favicon(),
            express.static(pdir)
        );

        // Set view engine settings
        server.set("views", "app/views");
        server.set("view engine", "ejs");
        server.set("view options", {
            layout: process.cwd() + "/app/views/layout"
        });

        // Connect database
        this._db_connect();

        // Sockets
        if (this.websockets){
            require("./websockets").setup(this);
            require("./websockets").install(this);
        }


        //-- Routes ------------------------------------------------------//

        this.get = function() {
            server.get.apply(server, arguments);
        };
        this.post = function() {
            server.post.apply(server, arguments);
        };
        this.put = function() {
            server.put.apply(server, arguments);
        };
        this.destroy = function() {
            server.destry.apply(server, arguments);
        };

        return this;

    },

    start: function(port) {
        
        // Bulletproof the port
        port = process.env.PORT || port || 3000;

        // Load App Files
        this.load("app/models").load("app");

        this.express.listen(port);

        this.info(this.appname + " is listening on port " + port);
        
        return this;
    }
    
});
